version: '3.8'

services:
  # Coordinator service
  coordinator:
    build:
      context: .
      dockerfile: ./docker/coordinator/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - rabbitmq
      - neo4j
      - mongodb
      - redis
      - weaviate
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - MONGODB_URI=mongodb://mongodb:27017/
      - MONGODB_DB=knowledge_platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - VECTOR_DB_HOST=weaviate
      - VECTOR_DB_PORT=8080
      - LOG_LEVEL=INFO
    networks:
      - knowledge_network

  # Scraper agents
  scraper_agents:
    build:
      context: .
      dockerfile: ./docker/agents/scraper/Dockerfile
    volumes:
      - .:/app
    depends_on:
      - coordinator
      - rabbitmq
    deploy:
      replicas: 3
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - LOG_LEVEL=INFO
    networks:
      - knowledge_network

  # Processor agents
  processor_agents:
    build:
      context: .
      dockerfile: ./docker/agents/processor/Dockerfile
    volumes:
      - .:/app
    depends_on:
      - coordinator
      - rabbitmq
    deploy:
      replicas: 3
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - LOG_LEVEL=INFO
    networks:
      - knowledge_network

  # Knowledge agents
  knowledge_agents:
    build:
      context: .
      dockerfile: ./docker/agents/knowledge/Dockerfile
    volumes:
      - .:/app
    depends_on:
      - coordinator
      - rabbitmq
      - neo4j
    deploy:
      replicas: 2
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - LOG_LEVEL=INFO
    networks:
      - knowledge_network

  # Learning agents
  learning_agents:
    build:
      context: .
      dockerfile: ./docker/agents/learning/Dockerfile
    volumes:
      - .:/app
    depends_on:
      - coordinator
      - rabbitmq
      - mongodb
    deploy:
      replicas: 2
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - MONGODB_URI=mongodb://mongodb:27017/
      - MONGODB_DB=knowledge_platform
      - LOG_LEVEL=INFO
    networks:
      - knowledge_network

  # UI agents
  ui_agents:
    build:
      context: .
      dockerfile: ./docker/agents/ui/Dockerfile
    volumes:
      - .:/app
    depends_on:
      - coordinator
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - LOG_LEVEL=INFO
    networks:
      - knowledge_network

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - knowledge_network

  # Neo4j for graph database
  neo4j:
    image: neo4j:4.4
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - knowledge_network

  # MongoDB for document storage
  mongodb:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - knowledge_network

  # Redis for caching
  redis:
    image: redis:6.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - knowledge_network

  # Weaviate for vector database
  weaviate:
    image: semitechnologies/weaviate:1.18.0
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
      ENABLE_MODULES: 'text2vec-transformers'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
    volumes:
      - weaviate_data:/var/lib/weaviate
    depends_on:
      - t2v-transformers
    networks:
      - knowledge_network

  # Text2Vec transformers module for Weaviate
  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2
    environment:
      ENABLE_CUDA: '0'
    networks:
      - knowledge_network

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - coordinator
    environment:
      - API_URL=http://coordinator:8000
    networks:
      - knowledge_network

volumes:
  rabbitmq_data:
  neo4j_data:
  neo4j_logs:
  mongodb_data:
  redis_data:
  weaviate_data:

networks:
  knowledge_network:
    driver: bridge 